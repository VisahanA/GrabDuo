{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/visah/Documents/GitHub/GrabDuo/src/app/api/upload-audio/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { writeFile, mkdir } from 'fs/promises';\r\nimport path from 'path';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const formData = await request.formData();\r\n    const file = formData.get('audio') as File;\r\n\r\n    if (!file) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No audio file provided' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate file type\r\n    if (!file.type.startsWith('audio/')) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'File must be an audio file' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Generate unique filename\r\n    const timestamp = Date.now();\r\n    const filename = `audio_${timestamp}.wav`;\r\n    const filepath = path.join(process.cwd(), 'public', 'uploads', filename);\r\n\r\n    // Create uploads directory if it doesn't exist\r\n    const uploadsDir = path.join(process.cwd(), 'public', 'uploads');\r\n    try {\r\n      await mkdir(uploadsDir, { recursive: true });\r\n    } catch (error) {\r\n      // Directory might already exist\r\n    }\r\n\r\n    // Convert file to buffer and save\r\n    const bytes = await file.arrayBuffer();\r\n    const buffer = Buffer.from(bytes);\r\n    await writeFile(filepath, buffer);\r\n\r\n    // Return the public URL\r\n    const publicUrl = `${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/uploads/${filename}`;\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      url: publicUrl,\r\n      filename: filename,\r\n      size: file.size,\r\n      type: file.type\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Audio upload error:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: error instanceof Error ? error.message : 'Unknown error occurred' \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Audio Upload API is running',\r\n    endpoints: {\r\n      POST: '/api/upload-audio - Upload audio file for STT processing',\r\n    }\r\n  });\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAyB,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,IAAI,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,WAAW;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAA6B,GACtD;gBAAE,QAAQ;YAAI;QAElB;QAEA,2BAA2B;QAC3B,MAAM,YAAY,KAAK,GAAG;QAC1B,MAAM,WAAW,CAAC,MAAM,EAAE,UAAU,IAAI,CAAC;QACzC,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,WAAW;QAE/D,+CAA+C;QAC/C,MAAM,aAAa,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU;QACtD,IAAI;YACF,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,YAAY;gBAAE,WAAW;YAAK;QAC5C,EAAE,OAAO,OAAO;QACd,gCAAgC;QAClC;QAEA,kCAAkC;QAClC,MAAM,QAAQ,MAAM,KAAK,WAAW;QACpC,MAAM,SAAS,OAAO,IAAI,CAAC;QAC3B,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD,EAAE,UAAU;QAE1B,wBAAwB;QACxB,MAAM,YAAY,GAAG,QAAQ,GAAG,CAAC,oBAAoB,IAAI,wBAAwB,SAAS,EAAE,UAAU;QAEtG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,KAAK;YACL,UAAU;YACV,MAAM,KAAK,IAAI;YACf,MAAM,KAAK,IAAI;QACjB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,SAAS;QACT,SAAS;QACT,WAAW;YACT,MAAM;QACR;IACF;AACF","debugId":null}}]
}