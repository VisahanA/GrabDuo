{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/visah/Documents/GitHub/GrabDuo/src/app/api/products/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nexport async function GET() {\r\n  try {\r\n    const filePath = path.join(process.cwd(), 'src', 'app', 'filterproductsdata1.json');\r\n    const fileContents = fs.readFileSync(filePath, 'utf8');\r\n    const jsonData = JSON.parse(fileContents);\r\n    \r\n    // Transform the JSON data to match our Product interface\r\n    const products = jsonData.map((item: any) => {\r\n      // Helper function to determine category badge\r\n      const getCategoryBadge = (mainCategory: string, categories: string) => {\r\n        if (!mainCategory && !categories) return \"Other\";\r\n        \r\n        const categoryText = (mainCategory || categories || \"\").toLowerCase();\r\n        \r\n        if (categoryText.includes('beverage') || categoryText.includes('drink')) return \"Beverages\";\r\n        if (categoryText.includes('fruit') || categoryText.includes('berry')) return \"Fruits\";\r\n        if (categoryText.includes('vegetable') || categoryText.includes('plant')) return \"Vegetables\";\r\n        if (categoryText.includes('dairy') || categoryText.includes('milk') || categoryText.includes('cheese')) return \"Dairy\";\r\n        if (categoryText.includes('biscuit') || categoryText.includes('cookie')) return \"Biscuits\";\r\n        if (categoryText.includes('snack') || categoryText.includes('crisp')) return \"Snacks\";\r\n        if (categoryText.includes('meat') || categoryText.includes('fish')) return \"Meat\";\r\n        if (categoryText.includes('cereal') || categoryText.includes('bread')) return \"Cereals\";\r\n        if (categoryText.includes('sweet') || categoryText.includes('chocolate') || categoryText.includes('candy')) return \"Sweets\";\r\n        \r\n        return \"Other\";\r\n      };\r\n      \r\n      // Helper function to get color based on category\r\n      const getCategoryColor = (badge: string) => {\r\n        const colors: { [key: string]: string } = {\r\n          \"Fruits\": \"from-yellow-300 to-orange-400\",\r\n          \"Vegetables\": \"from-green-300 to-green-500\",\r\n          \"Beverages\": \"from-blue-400 to-blue-600\",\r\n          \"Dairy\": \"from-pink-200 to-pink-400\",\r\n          \"Biscuits\": \"from-yellow-200 to-yellow-400\",\r\n          \"Snacks\": \"from-orange-400 to-red-500\",\r\n          \"Meat\": \"from-red-400 to-red-600\",\r\n          \"Cereals\": \"from-amber-300 to-amber-500\",\r\n          \"Sweets\": \"from-purple-300 to-purple-500\",\r\n          \"Other\": \"from-gray-300 to-gray-500\"\r\n        };\r\n        return colors[badge] || colors[\"Other\"];\r\n      };\r\n      \r\n      // Helper function to get icon based on category\r\n      const getCategoryIcon = (badge: string) => {\r\n        const icons: { [key: string]: string } = {\r\n          \"Fruits\": \"🍎\",\r\n          \"Vegetables\": \"🥬\",\r\n          \"Beverages\": \"🥤\",\r\n          \"Dairy\": \"🥛\",\r\n          \"Biscuits\": \"🍪\",\r\n          \"Snacks\": \"🥨\",\r\n          \"Meat\": \"🥩\",\r\n          \"Cereals\": \"🌾\",\r\n          \"Sweets\": \"🍭\",\r\n          \"Other\": \"📦\"\r\n        };\r\n        return icons[badge] || icons[\"Other\"];\r\n      };\r\n      \r\n      // Helper function to generate a reasonable price\r\n      const generatePrice = (quantity: string, badge: string) => {\r\n        if (!quantity) return \"S$1.00\";\r\n        \r\n        const numMatch = quantity.match(/(\\d+(\\.\\d+)?)/);\r\n        const basePrice = numMatch ? parseFloat(numMatch[1]) * 0.01 : 1.0;\r\n        \r\n        let multiplier = 1;\r\n        if (badge === \"Beverages\") multiplier = 0.5;\r\n        else if (badge === \"Fruits\") multiplier = 0.8;\r\n        else if (badge === \"Vegetables\") multiplier = 0.6;\r\n        else if (badge === \"Dairy\") multiplier = 1.2;\r\n        else if (badge === \"Meat\") multiplier = 2.0;\r\n        \r\n        const finalPrice = Math.max(0.25, basePrice * multiplier);\r\n        return `S$${finalPrice.toFixed(2)}`;\r\n      };\r\n      \r\n      const badge = getCategoryBadge(item.main_category, item.categories);\r\n      const price = generatePrice(item.unitQuantity || item.quantity, badge);\r\n      \r\n      return {\r\n        id: parseInt(item.code),\r\n        name: item.product_name || \"Unknown Product\",\r\n        price: price,\r\n        badge: badge,\r\n        color: getCategoryColor(badge),\r\n        icon: getCategoryIcon(badge),\r\n        brands: item.brands || \"\",\r\n        unitQuantity: item.unitQuantity || item.quantity || \"\",\r\n        categories: item.categories || \"\",\r\n        countries: item.countries || \"\",\r\n        imageUrl: item.image_url || \"\",\r\n        imageSmallUrl: item.image_small_url || \"\"\r\n      };\r\n    });\r\n    \r\n    return NextResponse.json(products);\r\n  } catch (error) {\r\n    console.error('Error loading products:', error);\r\n    return NextResponse.json({ error: 'Failed to load products' }, { status: 500 });\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}